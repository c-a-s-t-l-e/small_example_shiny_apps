shiny::runApp('shiny_doc_generator')
install.packages('htmltools')
install.packages("data.table")
shiny::runApp('shiny_doc_generator')
install.packages("bscols")
install.packages("crosstalk")
install.packages("bscols")
install.packges("tidyverse")
install.packages("tidyverse")
install.packages('leaflet')
shiny::runApp('shiny_doc_generator')
install.packages('leaflet')
install.packges("terra")
install.packages("Rcpp")
install.packages('leaflet')
shiny::runApp('shiny_doc_generator')
install.packages('leaflet')
install.packages('leaflet')
runApp('shiny_doc_generator')
runApp('shiny_doc_generator')
install.packages("plotly")
shiny::runApp('shiny_doc_generator')
runApp('shiny_doc_generator')
runApp('shiny_doc_generator')
runApp('shiny_doc_generator')
install.packages("fakir")
sd <- SharedData$new(fake_products(20))
sd <- SharedData$new(fakir::fake_products(20))
sd
View(sd)
View(fake_products(20))
View(fakir::fake_products(20))
install.package("bslib")
install.packages("bslib")
shiny::runApp('shiny_doc_generator')
runApp('shiny_doc_generator')
runApp('shiny_doc_generator')
install.packages("palmerpenguins")
runApp('shiny_doc_generator')
library(tidyverse)
?data()
patient_data <- read_csv("fake_patient_data.csv")
runApp('shiny_doc_generator')
runApp('shiny_doc_generator')
runApp('shiny_doc_generator')
runApp('shiny_doc_generator')
runApp('shiny_doc_generator')
runApp('shiny_doc_generator')
runApp('shiny_doc_generator')
runApp('shiny_doc_generator')
runApp('shiny_doc_generator')
runApp('shiny_doc_generator')
runApp('shiny_doc_generator')
runApp('shiny_doc_generator')
runApp('shiny_doc_generator')
runApp('shiny_doc_generator')
runApp('shiny_doc_generator')
runApp('shiny_doc_generator')
runApp('shiny_doc_generator')
runApp('shiny_doc_generator')
runApp('shiny_doc_generator')
runApp('shiny_doc_generator')
View(patient_data)
patient_data <- read_csv("fake_patient_data.csv")
setwd("~/r_projects/shiny_doc_generator/shiny_doc_generator")
patient_data <- read_csv("fake_patient_data.csv")
View(patient_data)
type(patient_data$FirstName)
dtype(patient_data$FirstName)
type(patient_data$FirstName)
patient_data$FirstName
factor(patient_data$BloodType)
patient_data
runApp()
shiny::runApp('shiny_doc_generator')
runApp('shiny_doc_generator')
runApp('shiny_doc_generator')
runApp('shiny_doc_generator')
install.packages("htmltools")
install.packges('sap')
shiny::runApp('shiny_doc_generator')
runApp('shiny_doc_generator')
runApp('shiny_doc_generator')
runApp('shiny_doc_generator')
runApp('shiny_doc_generator')
runApp('shiny_doc_generator')
runApp('shiny_doc_generator')
runApp('shiny_doc_generator')
runApp('shiny_doc_generator')
runApp('shiny_doc_generator')
install.packages('pdftools')
runApp('shiny_doc_generator')
runApp('shiny_doc_generator')
install.packages("pdftools")
runApp('shiny_doc_generator')
runApp('shiny_doc_generator')
runApp('shiny_doc_generator')
install.packages("pandoc")
runApp('shiny_doc_generator')
runApp('shiny_doc_generator')
runApp('shiny_doc_generator')
runApp('shiny_doc_generator')
runApp('shiny_doc_generator')
runApp('shiny_doc_generator')
runApp('shiny_doc_generator')
shiny::runApp('shiny_doc_generator')
library(shiny)
library(crosstalk)
# library(leaflet)
library(DT)
library(plotly)
library(bslib)
library(tidyverse)
library(pdftools)
# Wrap data frame in SharedData
# Use SharedData like a dataframe with Crosstalk-enabled widgets
# sd <- SharedData$new(quakes[sample(nrow(quakes), 100),])
patient_data <- read_csv("fake_patient_data.csv")
runApp('shiny_doc_generator')
